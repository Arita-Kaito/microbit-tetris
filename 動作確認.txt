<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>micro:bit Sensor Data</title>
    <script src="bluejelly.js"></script> <!-- BlueJelly ライブラリの読み込み -->
    
    <style>
        #sensorData {
            font-size: 20px;
            margin-top: 20px;
        }
        #dataList {
            font-size: 16px;
            margin-top: 20px;
            max-height: 200px;
            overflow-y: scroll;
        }
    </style>
</head>
<body>
    <h1>micro:bit Sensor Data</h1>

    <button id="startButton">Start Bluetooth</button>

    <div id="sensorData">
        <p><strong>Accelerometer (X, Y, Z): </strong><span id="accData">0, 0, 0</span></p>
        <p><strong>Temperature: </strong><span id="tempData">0</span></p>
        <p><strong>Light Level: </strong><span id="lightData">0</span></p>
    </div>

    <div id="dataList">
        <ul id="sensorDataList"></ul>
    </div>

    <script>
        const blueJelly = new BlueJelly();

        // UUIDの設定（UARTサービスを利用）
        const serviceUUID = '6e400001-b5a3-f393-e0a9-e50e24dcca9e'; // UART Service
        const characteristicUUID = '6e400002-b5a3-f393-e0a9-e50e24dcca9e'; // TX Characteristic

        let characteristic;

        // ボタンが押されたときにBluetoothデバイスを接続
        document.getElementById('startButton').addEventListener('click', async () => {
            try {
                // デバイスをスキャンして接続
                const device = await navigator.bluetooth.requestDevice({
                    filters: [{ namePrefix: 'BBC micro:bit' }], // 名前が "BBC micro:bit" を含むデバイスに限定
                    optionalServices: [serviceUUID]
                });
                console.log('Device selected:', device);

                const server = await device.gatt.connect();
                console.log('Connected to GATT server');

                const service = await server.getPrimaryService(serviceUUID);
                console.log('Service found');

                characteristic = await service.getCharacteristic(characteristicUUID);
                console.log('Characteristic found');

                // 通知の開始
                await characteristic.startNotifications();
                console.log('Notifications started');

                // データ受信時のイベントリスナーを設定
                characteristic.addEventListener('characteristicvaluechanged', event => {
                    const value = event.target.value; // DataView
                    const decoder = new TextDecoder('utf-8');
                    const decodedString = decoder.decode(value); // UTF-8デコード
                    console.log(decodedString);

                    // リストに追加
                    //const dataList = document.getElementById('sensorDataList');
                    //const newListItem = document.createElement('li');
                    //newListItem.textContent = `${decodedString}`;
                    //dataList.appendChild(newListItem);

                    // データ解析
                    const accMatch = decodedString.match(/a:([\d\-,]+)/);
                    const tempMatch = decodedString.match(/t:(\d+)/);
                    const lightMatch = decodedString.match(/l:(\d+)/);

                    if (accMatch) {
                        const accData = accMatch[1].split(',');
                        document.getElementById('accData').textContent = `X: ${accData[0]}, Y: ${accData[1]}, Z: ${accData[2]}`;
                    }

                    if (tempMatch) {
                        document.getElementById('tempData').textContent = tempMatch[1];
                    }

                    if (lightMatch) {
                        document.getElementById('lightData').textContent = lightMatch[1];
                    }
                });
            } catch (error) {
                console.error('Connection Error:', error);
            }
        });
    </script>
</body>
</html>
